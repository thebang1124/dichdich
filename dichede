<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Tr√¨nh D·ªãch Ti·∫øng √ä-ƒë√™</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Be+Vietnam+Pro:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Be Vietnam Pro', sans-serif;
            background-color: #f0f4f8;
        }
        .card {
            background-color: rgba(255, 255, 255, 0.8);
            backdrop-filter: blur(10px);
            -webkit-backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.2);
        }
        .tab-button.active {
            border-color: #2563eb;
            color: #2563eb;
            background-color: #dbeafe;
        }
        .loader {
            border: 4px solid #f3f3f3;
            border-top: 4px solid #3498db;
            border-radius: 50%;
            width: 24px;
            height: 24px;
            animation: spin 1s linear infinite;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        .dictionary-item:hover {
            background-color: #f9fafb;
            transform: translateX(4px);
        }
    </style>
</head>
<body class="antialiased text-slate-800">

    <div class="min-h-screen p-4 sm:p-6 md:p-8 flex flex-col items-center">
        <header class="text-center mb-8">
            <h1 class="text-4xl sm:text-5xl font-bold text-slate-900">Tr√¨nh D·ªãch Ti·∫øng √ä-ƒë√™</h1>
            <p class="mt-2 text-lg text-slate-600">M·ªôt c√¥ng c·ª• hi·ªán ƒë·∫°i ƒë·ªÉ kh√°m ph√° ng√¥n ng·ªØ √ä-ƒë√™</p>
        </header>

        <main class="w-full max-w-4xl mx-auto">
            <div class="card rounded-2xl shadow-lg p-6 md:p-8">
                <p class="mb-6 text-slate-700 text-center">
                    ·ª®ng d·ª•ng n√†y cho ph√©p b·∫°n d·ªãch vƒÉn b·∫£n, t·∫°o v√≠ d·ª•, t√≥m t·∫Øt n·ªôi dung v√† th·∫≠m ch√≠ d·ªãch t·ª´ h√¨nh ·∫£nh. B·∫Øt ƒë·∫ßu b·∫±ng c√°ch nh·∫≠p vƒÉn b·∫£n v√†o √¥ b√™n d∆∞·ªõi.
                </p>
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div class="flex flex-col space-y-4">
                        <label for="inputText" class="font-semibold text-slate-800">VƒÉn b·∫£n g·ªëc (Vi·ªát ho·∫∑c √ä-ƒë√™)</label>
                        <div class="relative w-full">
                            <textarea id="inputText" rows="8" class="w-full p-4 rounded-lg border-2 border-slate-200 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition duration-300 resize-none" placeholder="Nh·∫≠p vƒÉn b·∫£n c·∫ßn d·ªãch..."></textarea>
                            <button id="recordButton" title="Ghi √¢m gi·ªçng n√≥i" class="absolute bottom-3 right-3 p-2 rounded-full bg-slate-100 hover:bg-slate-200 transition">
                                <span class="record-icon">üéôÔ∏è</span>
                            </button>
                        </div>
                    </div>
                    <div class="flex flex-col space-y-4">
                        <label for="outputText" class="font-semibold text-slate-800">K·∫øt qu·∫£ d·ªãch</label>
                         <div class="relative w-full">
                            <textarea id="outputText" rows="8" readonly class="w-full p-4 rounded-lg bg-slate-100 border-2 border-slate-200 resize-none" placeholder="K·∫øt qu·∫£ d·ªãch s·∫Ω hi·ªÉn th·ªã ·ªü ƒë√¢y..."></textarea>
                            <button id="speakTranslatedTextButton" title="Ph√°t √¢m vƒÉn b·∫£n" class="absolute bottom-3 right-3 p-2 rounded-full bg-slate-200 hover:bg-slate-300 transition">
                                <span>üîä</span>
                            </button>
                        </div>
                    </div>
                </div>

                <div class="mt-6 flex flex-col sm:flex-row items-center justify-center gap-4">
                    <button id="translateButton" class="w-full sm:w-auto flex items-center justify-center gap-2 px-8 py-3 bg-blue-600 text-white font-semibold rounded-lg shadow-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-transform transform hover:scale-105">
                        <span class="button-icon">‚ú®</span>
                        <span class="button-text">D·ªãch</span>
                    </button>
                    <button id="generateExamplesButton" class="w-full sm:w-auto flex items-center justify-center gap-2 px-6 py-3 bg-orange-500 text-white font-semibold rounded-lg shadow-md hover:bg-orange-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-orange-500 transition-transform transform hover:scale-105">
                        <span class="button-icon">üí°</span>
                        <span class="button-text">T·∫°o v√≠ d·ª•</span>
                    </button>
                    <button id="summarizeExplainButton" class="w-full sm:w-auto flex items-center justify-center gap-2 px-6 py-3 bg-purple-600 text-white font-semibold rounded-lg shadow-md hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-purple-500 transition-transform transform hover:scale-105">
                        <span class="button-icon">üìù</span>
                        <span class="button-text">T√≥m t·∫Øt</span>
                    </button>
                </div>
                 <div id="additionalOutputWrapper" class="mt-6 hidden">
                    <label for="additionalOutput" class="font-semibold text-slate-800">K·∫øt qu·∫£ b·ªï sung</label>
                    <div class="relative w-full mt-2">
                        <textarea id="additionalOutput" rows="4" readonly class="w-full p-4 rounded-lg bg-slate-100 border-2 border-slate-200 resize-none"></textarea>
                        <button id="speakAdditionalTextButton" title="Ph√°t √¢m vƒÉn b·∫£n" class="absolute bottom-3 right-3 p-2 rounded-full bg-slate-200 hover:bg-slate-300 transition">
                             <span>üîä</span>
                        </button>
                    </div>
                </div>
            </div>

            <!-- Write Essay Section -->
            <div class="card rounded-2xl shadow-lg p-6 md:p-8 mt-10">
                <h2 class="text-2xl font-bold text-slate-900 mb-4 text-center">Vi·∫øt B√†i VƒÉn T·ª´ G·ª£i √ù</h2>
                <p class="mb-6 text-slate-700 text-center">
                    Nh·∫≠p c√°c t·ª´ kh√≥a ho·∫∑c g·ª£i √Ω c·ªßa b·∫°n v√†o ƒë√¢y, v√† Gemini s·∫Ω gi√∫p b·∫°n t·∫°o ra m·ªôt b√†i vƒÉn ho√†n ch·ªânh.
                </p>
                <div class="flex flex-col space-y-4">
                    <label for="essayKeywords" class="font-semibold text-slate-800">T·ª´ kh√≥a/G·ª£i √Ω:</label>
                    <textarea id="essayKeywords" rows="4" class="w-full p-4 rounded-lg border-2 border-slate-200 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition duration-300 resize-none" placeholder="V√≠ d·ª•: L·ª£i √≠ch c·ªßa vi·ªác h·ªçc ti·∫øng √ä-ƒë√™, vƒÉn h√≥a d√¢n t·ªôc, b·∫£o t·ªìn ng√¥n ng·ªØ..."></textarea>
                </div>
                <button id="generateEssayButton" class="mt-6 w-full flex items-center justify-center gap-2 px-8 py-3 bg-indigo-600 text-white font-semibold rounded-lg shadow-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition-transform transform hover:scale-105">
                    <span class="button-icon">‚úçÔ∏è</span>
                    <span class="button-text">T·∫°o B√†i VƒÉn</span>
                </button>
                <div id="essayOutputWrapper" class="mt-6 hidden">
                    <label for="essayOutput" class="font-semibold text-slate-800">B√†i vƒÉn ƒë√£ t·∫°o:</label>
                    <div class="relative w-full mt-2">
                        <textarea id="essayOutput" rows="10" readonly class="w-full p-4 rounded-lg bg-slate-100 border-2 border-slate-200 resize-none"></textarea>
                        <button id="speakEssayTextButton" title="Ph√°t √¢m b√†i vƒÉn" class="absolute bottom-3 right-3 p-2 rounded-full bg-slate-200 hover:bg-slate-300 transition">
                             <span>üîä</span>
                        </button>
                    </div>
                </div>
            </div>

            <div class="mt-10">
                <div class="mb-4 border-b border-slate-300 flex justify-center">
                    <button data-tab="imageTab" class="tab-button text-lg font-medium py-2 px-6 border-b-2 transition active">D·ªãch t·ª´ ·∫£nh</button>
                    <button data-tab="dictionaryTab" class="tab-button text-lg font-medium py-2 px-6 border-b-2 border-transparent text-slate-500 hover:text-slate-700 transition">T·ª´ ƒëi·ªÉn c√° nh√¢n</button>
                </div>

                <div class="tab-content card rounded-2xl shadow-lg p-6 md:p-8">
                    <div id="imageTab" class="space-y-6">
                        <p class="text-slate-700">T·∫£i l√™n m·ªôt h√¨nh ·∫£nh c√≥ ch·ª©a vƒÉn b·∫£n ƒë·ªÉ tr√≠ch xu·∫•t v√† d·ªãch. H·ªá th·ªëng s·∫Ω t·ª± ƒë·ªông nh·∫≠n di·ªán ng√¥n ng·ªØ v√† th·ª±c hi·ªán d·ªãch thu·∫≠t.</p>
                        <div class="p-6 border-2 border-dashed border-slate-300 rounded-lg text-center cursor-pointer hover:border-blue-500 hover:bg-blue-50 transition" id="dropZone">
                            <input type="file" id="imageInput" class="hidden" accept="image/*">
                            <div id="imagePlaceholder">
                                <span class="text-4xl">üñºÔ∏è</span>
                                <p class="mt-2 text-slate-600">K√©o v√† th·∫£ ·∫£nh v√†o ƒë√¢y, ho·∫∑c <span class="font-semibold text-blue-600">nh·∫•n ƒë·ªÉ ch·ªçn file</span></p>
                            </div>
                            <div id="imagePreviewWrapper" class="hidden relative">
                                <img id="imagePreview" class="max-h-60 mx-auto rounded-md shadow-md"/>
                                <button id="removeImageButton" class="absolute -top-2 -right-2 bg-white rounded-full p-1 shadow-md text-red-500 hover:bg-red-50 text-xl font-bold">&times;</button>
                            </div>
                        </div>
                        <button id="translateImageButton" class="w-full flex items-center justify-center gap-2 px-8 py-3 bg-teal-600 text-white font-semibold rounded-lg shadow-md hover:bg-teal-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-teal-500 transition-transform transform hover:scale-105 disabled:bg-slate-400 disabled:cursor-not-allowed disabled:transform-none">
                            <span class="button-icon">üì∑</span>
                            <span class="button-text">D·ªãch t·ª´ ·∫£nh</span>
                        </button>
                    </div>

                    <div id="dictionaryTab" class="hidden space-y-6">
                        <p class="text-slate-700">X√¢y d·ª±ng t·ª´ ƒëi·ªÉn c·ªßa ri√™ng b·∫°n. C√°c b·∫£n d·ªãch b·∫°n th√™m v√†o ƒë√¢y s·∫Ω ƒë∆∞·ª£c ∆∞u ti√™n s·ª≠ d·ª•ng, gi√∫p c·∫£i thi·ªán ƒë·ªô ch√≠nh x√°c theo th·ªùi gian.</p>
                        <div>
                            <h3 class="text-lg font-semibold mb-3">Th√™m t·ª´ m·ªõi</h3>
                            <div class="flex flex-col sm:flex-row gap-4">
                                <input type="text" id="newEdeText" placeholder="Nh·∫≠p t·ª´ ti·∫øng √ä-ƒë√™" class="flex-1 p-3 rounded-lg border-2 border-slate-200 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition">
                                <input type="text" id="newVietText" placeholder="Nh·∫≠p nghƒ©a ti·∫øng Vi·ªát" class="flex-1 p-3 rounded-lg border-2 border-slate-200 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition">
                                <button id="addTermButton" class="px-6 py-3 bg-green-600 text-white font-semibold rounded-lg shadow-md hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 transition-transform transform hover:scale-105">Th√™m</button>
                            </div>
                        </div>
                        
                        <!-- New: Load Dictionary Section -->
                        <div class="mt-6 pt-4 border-t border-slate-200">
                            <h3 class="text-lg font-semibold mb-3">T·∫£i t·ª´ ƒëi·ªÉn t·ª´ File</h3>
                            <p class="text-slate-600 text-sm mb-2">Ch·ªçn m·ªôt file JSON (.json) ch·ª©a c√°c c·∫∑p t·ª´ ƒëi·ªÉn c·ªßa b·∫°n. ƒê·ªãnh d·∫°ng file: <code class="bg-slate-100 p-1 rounded">[{ "ede": "t·ª´ √ä-ƒë√™", "viet": "t·ª´ ti·∫øng Vi·ªát" }]</code></p>
                            <div class="flex flex-col sm:flex-row gap-4 items-center">
                                <input type="file" id="loadDictionaryFileInput" accept=".json" class="flex-1 p-2 rounded-lg border-2 border-slate-200">
                                <button id="loadDictionaryFromFileButton" class="px-6 py-3 bg-blue-500 text-white font-semibold rounded-lg shadow-md hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-transform transform hover:scale-105">
                                    <span class="button-icon">üìÇ</span>
                                    <span class="button-text">T·∫£i t·ª´ File</span>
                                </button>
                            </div>
                            <p class="text-slate-600 text-sm mt-4 mb-2">
                                <span class="font-bold">L∆∞u √Ω:</span> T√≠nh nƒÉng t·∫£i t·ª´ ƒëi·ªÉn t·ª´ Web (URL) hi·ªán ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn.
                            </p>
                            <!-- Placeholder for Load from Web Button -->
                            <!--
                            <div class="flex flex-col sm:flex-row gap-4 mt-2">
                                <input type="text" id="loadDictionaryUrlInput" placeholder="https://example.com/dictionary.json" class="flex-1 p-3 rounded-lg border-2 border-slate-200">
                                <button id="loadDictionaryFromWebButton" class="px-6 py-3 bg-blue-500 text-white font-semibold rounded-lg shadow-md hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-transform transform hover:scale-105">
                                    <span class="button-icon">üåê</span>
                                    <span class="button-text">T·∫£i t·ª´ Web</span>
                                </button>
                            </div>
                            -->
                        </div>

                        <div class="mt-6 pt-4 border-t border-slate-200">
                            <h3 class="lg font-semibold mb-3">C√°c b·∫£n d·ªãch c·ªßa b·∫°n</h3>
                            <div id="customTranslationsList" class="max-h-80 overflow-y-auto space-y-3 pr-2">
                                <p class="text-slate-500 text-center py-4" id="dictionaryPlaceholder">T·ª´ ƒëi·ªÉn c√° nh√¢n c·ªßa b·∫°n ƒëang tr·ªëng.</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </main>
        
        <footer class="text-center mt-10 text-slate-500 text-sm">
            <p>Ph√°t tri·ªÉn b·ªüi Gemini &copy; 2025</p>
            <p id="userIdDisplay" class="mt-1 opacity-70">ƒêang ch·ªù x√°c th·ª±c ng∆∞·ªùi d√πng...</p>
        </footer>
    </div>

<script>
document.addEventListener('DOMContentLoaded', () => {

    const state = {
        isLoading: false,
        currentTab: 'imageTab',
        userId: null,
        dictionary: [
            { id: 1, ede: 'klei', viet: 'l·ªùi n√≥i' },
            { id: 2, ede: 'mnuih', viet: 'ng∆∞·ªùi' },
            { id: 3, ede: 'hri√™', viet: 'ng√†y' }
        ],
        selectedImageFile: null,
        isGeneratingEssay: false
    };

    const ui = {
        inputText: document.getElementById('inputText'),
        outputText: document.getElementById('outputText'),
        additionalOutput: document.getElementById('additionalOutput'),
        additionalOutputWrapper: document.getElementById('additionalOutputWrapper'),
        translateButton: document.getElementById('translateButton'),
        generateExamplesButton: document.getElementById('generateExamplesButton'),
        summarizeExplainButton: document.getElementById('summarizeExplainButton'),
        recordButton: document.getElementById('recordButton'),
        speakTranslatedTextButton: document.getElementById('speakTranslatedTextButton'),
        speakAdditionalTextButton: document.getElementById('speakAdditionalTextButton'),
        tabs: document.querySelectorAll('.tab-button'),
        tabContents: document.querySelectorAll('.tab-content > div'),
        imageInput: document.getElementById('imageInput'),
        dropZone: document.getElementById('dropZone'),
        imagePlaceholder: document.getElementById('imagePlaceholder'),
        imagePreviewWrapper: document.getElementById('imagePreviewWrapper'),
        imagePreview: document.getElementById('imagePreview'),
        removeImageButton: document.getElementById('removeImageButton'),
        translateImageButton: document.getElementById('translateImageButton'),
        newEdeText: document.getElementById('newEdeText'),
        newVietText: document.getElementById('newVietText'),
        addTermButton: document.getElementById('addTermButton'),
        customTranslationsList: document.getElementById('customTranslationsList'),
        dictionaryPlaceholder: document.getElementById('dictionaryPlaceholder'),
        userIdDisplay: document.getElementById('userIdDisplay'),
        // New elements for essay generation
        essayKeywords: document.getElementById('essayKeywords'),
        generateEssayButton: document.getElementById('generateEssayButton'),
        essayOutput: document.getElementById('essayOutput'),
        essayOutputWrapper: document.getElementById('essayOutputWrapper'),
        speakEssayTextButton: document.getElementById('speakEssayTextButton'),
        // New elements for dictionary loading
        loadDictionaryFileInput: document.getElementById('loadDictionaryFileInput'),
        loadDictionaryFromFileButton: document.getElementById('loadDictionaryFromFileButton'),
        // loadDictionaryUrlInput: document.getElementById('loadDictionaryUrlInput'), // Placeholder
        // loadDictionaryFromWebButton: document.getElementById('loadDictionaryFromWebButton') // Placeholder
    };
    
    // Function to call Gemini API
    async function callGeminiAPI(prompt, imageData = null, model = 'gemini-2.0-flash') {
        const apiKey = ""; // API key will be provided by the Canvas environment automatically
        const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/${model}:generateContent?key=${apiKey}`;

        let chatHistory = [];
        let parts = [{ text: prompt }];

        if (imageData) {
            parts.push({
                inlineData: {
                    mimeType: imageData.mimeType,
                    data: imageData.data
                }
            });
        }
        chatHistory.push({ role: "user", parts: parts });

        const payload = { contents: chatHistory };

        try {
            const response = await fetch(apiUrl, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(payload)
            });

            if (!response.ok) {
                const errorData = await response.json();
                console.error("API Error:", errorData);
                throw new Error(`L·ªói API: ${response.status} - ${errorData.error.message || 'Unknown error'}`);
            }

            const result = await response.json();
            if (result.candidates && result.candidates.length > 0 &&
                result.candidates[0].content && result.candidates[0].content.parts &&
                result.candidates[0].content.parts.length > 0) {
                return result.candidates[0].content.parts[0].text;
            } else {
                console.warn("Unexpected API response structure:", result);
                throw new Error("C·∫•u tr√∫c ph·∫£n h·ªìi API kh√¥ng mong mu·ªën.");
            }
        } catch (error) {
            console.error("Error calling Gemini API:", error);
            throw error;
        }
    }

    function setLoadingState(button, isLoading, originalText) {
        const textSpan = button.querySelector('.button-text');
        const iconSpan = button.querySelector('.button-icon');
        
        if (isLoading) {
            state.isLoading = true; // Global loading state
            button.disabled = true;
            textSpan.textContent = 'ƒêang x·ª≠ l√Ω...';
            iconSpan.innerHTML = '<div class="loader"></div>';
        } else {
            state.isLoading = false; // Global loading state
            button.disabled = false;
            textSpan.textContent = originalText;
            switch(originalText) {
                case 'D·ªãch': iconSpan.innerHTML = '‚ú®'; break;
                case 'T·∫°o v√≠ d·ª•': iconSpan.innerHTML = 'üí°'; break;
                case 'T√≥m t·∫Øt': iconSpan.innerHTML = 'üìù'; break;
                case 'D·ªãch t·ª´ ·∫£nh': iconSpan.innerHTML = 'üì∑'; break;
                case 'T·∫°o B√†i VƒÉn': iconSpan.innerHTML = '‚úçÔ∏è'; break; // New icon for essay button
                case 'T·∫£i t·ª´ File': iconSpan.innerHTML = 'üìÇ'; break; // New icon for load file button
                // case 'T·∫£i t·ª´ Web': iconSpan.innerHTML = 'üåê'; break; // Placeholder
            }
        }
    }
    
    function renderDictionary() {
        ui.customTranslationsList.innerHTML = '';
        if (state.dictionary.length === 0) {
            ui.customTranslationsList.appendChild(ui.dictionaryPlaceholder);
            ui.dictionaryPlaceholder.classList.remove('hidden');
        } else {
            if (ui.dictionaryPlaceholder) {
                ui.dictionaryPlaceholder.classList.add('hidden');
            }
            state.dictionary.forEach(term => {
                const item = document.createElement('div');
                item.className = 'dictionary-item flex justify-between items-center p-3 rounded-lg border border-slate-200 transition-all duration-300';
                item.innerHTML = `
                    <div>
                        <p class="font-semibold text-slate-800">${term.ede}</p>
                        <p class="text-sm text-slate-500">${term.viet}</p>
                    </div>
                    <button data-id="${term.id}" class="delete-term-btn text-red-500 hover:text-red-700 p-1 rounded-full text-lg">&times;</button>
                `;
                ui.customTranslationsList.appendChild(item);
            });
        }
    }

    async function handleTranslate() {
        if (state.isLoading || !ui.inputText.value.trim()) return;
        setLoadingState(ui.translateButton, true, 'D·ªãch');
        ui.outputText.value = '';
        ui.additionalOutputWrapper.classList.add('hidden');
        
        const inputTextLower = ui.inputText.value.trim().toLowerCase();
        let translatedText = '';

        const customMatch = state.dictionary.find(t => t.ede.toLowerCase() === inputTextLower || t.viet.toLowerCase() === inputTextLower);
        if (customMatch) {
            translatedText = customMatch.ede.toLowerCase() === inputTextLower ? customMatch.viet : customMatch.ede;
            translatedText += " (t·ª´ t·ª´ ƒëi·ªÉn c√° nh√¢n)";
            ui.outputText.value = translatedText;
            setLoadingState(ui.translateButton, false, 'D·ªãch');
            return;
        }
        
        const prompt = `B·∫°n l√† m·ªôt c√¥ng c·ª• d·ªãch thu·∫≠t chuy√™n nghi·ªáp. H√£y d·ªãch vƒÉn b·∫£n sau ƒë√¢y gi·ªØa ti·∫øng Vi·ªát v√† ti·∫øng √ä-ƒë√™. N·∫øu vƒÉn b·∫£n l√† ti·∫øng Vi·ªát, h√£y d·ªãch sang ti·∫øng √ä-ƒë√™. N·∫øu vƒÉn b·∫£n l√† ti·∫øng √ä-ƒë√™, h√£y d·ªãch sang ti·∫øng Vi·ªát. Ch·ªâ tr·∫£ v·ªÅ vƒÉn b·∫£n ƒë√£ d·ªãch, kh√¥ng th√™m b·∫•t k·ª≥ gi·∫£i th√≠ch n√†o. VƒÉn b·∫£n c·∫ßn d·ªãch: ${ui.inputText.value}`;

        try {
            translatedText = await callGeminiAPI(prompt);
            ui.outputText.value = translatedText;
        } catch (error) {
            ui.outputText.value = `ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh d·ªãch: ${error.message}`;
        } finally {
            setLoadingState(ui.translateButton, false, 'D·ªãch');
        }
    }

    async function handleGenerateExamples() {
        if (state.isLoading || !ui.outputText.value.trim() || ui.outputText.value.includes("K·∫øt qu·∫£ d·ªãch s·∫Ω hi·ªÉn th·ªã ·ªü ƒë√¢y")) return;
        setLoadingState(ui.generateExamplesButton, true, 'T·∫°o v√≠ d·ª•');
        ui.additionalOutput.value = '';
        
        const prompt = `T·∫°o 3 c√¢u v√≠ d·ª• s·ª≠ d·ª•ng t·ª´ ho·∫∑c c·ª•m t·ª´ "${ui.outputText.value}" trong ng·ªØ c·∫£nh kh√°c nhau. C√°c c√¢u v√≠ d·ª• n√†y n√™n ƒë∆∞·ª£c d·ªãch sang ng√¥n ng·ªØ c√≤n l·∫°i (n·∫øu t·ª´ g·ªëc l√† ti·∫øng Vi·ªát, v√≠ d·ª• l√† ti·∫øng √ä-ƒë√™ v√† ng∆∞·ª£c l·∫°i). Ch·ªâ tr·∫£ v·ªÅ c√°c c√¢u v√≠ d·ª•, m·ªói c√¢u tr√™n m·ªôt d√≤ng m·ªõi, kh√¥ng th√™m b·∫•t k·ª≥ gi·∫£i th√≠ch n√†o.`;

        try {
            const examples = await callGeminiAPI(prompt);
            ui.additionalOutput.value = examples;
            ui.additionalOutputWrapper.classList.remove('hidden');
        } catch (error) {
            ui.additionalOutput.value = `ƒê√£ x·∫£y ra l·ªói khi t·∫°o v√≠ d·ª•: ${error.message}`;
        } finally {
            setLoadingState(ui.generateExamplesButton, false, 'T·∫°o v√≠ d·ª•');
        }
    }

    async function handleSummarize() {
        if (state.isLoading || !ui.outputText.value.trim() || ui.outputText.value.includes("K·∫øt qu·∫£ d·ªãch s·∫Ω hi·ªÉn th·ªã ·ªü ƒë√¢y")) return;
        setLoadingState(ui.summarizeExplainButton, true, 'T√≥m t·∫Øt');
        ui.additionalOutput.value = '';

        const prompt = `T√≥m t·∫Øt ho·∫∑c gi·∫£i th√≠ch ng·∫Øn g·ªçn √Ω nghƒ©a c·ªßa vƒÉn b·∫£n sau: "${ui.outputText.value}". N·∫øu vƒÉn b·∫£n ph·ª©c t·∫°p, h√£y gi·∫£i th√≠ch c√°c ƒëi·ªÉm ch√≠nh. Ch·ªâ tr·∫£ v·ªÅ ph·∫ßn t√≥m t·∫Øt/gi·∫£i th√≠ch, kh√¥ng th√™m b·∫•t k·ª≥ gi·∫£i th√≠ch n√†o kh√°c.`;

        try {
            const summary = await callGeminiAPI(prompt);
            ui.additionalOutput.value = summary;
            ui.additionalOutputWrapper.classList.remove('hidden');
        } catch (error) {
            ui.additionalOutput.value = `ƒê√£ x·∫£y ra l·ªói khi t√≥m t·∫Øt/gi·∫£i th√≠ch: ${error.message}`;
        } finally {
            setLoadingState(ui.summarizeExplainButton, false, 'T√≥m t·∫Øt');
        }
    }

    async function handleGenerateEssay() {
        if (state.isLoading || !ui.essayKeywords.value.trim()) return;
        setLoadingState(ui.generateEssayButton, true, 'T·∫°o B√†i VƒÉn');
        ui.essayOutput.value = '';
        ui.essayOutputWrapper.classList.add('hidden');

        const prompt = `Vi·∫øt m·ªôt b√†i vƒÉn v·ªÅ ch·ªß ƒë·ªÅ d·ª±a tr√™n c√°c t·ª´ kh√≥a sau: "${ui.essayKeywords.value}". B√†i vƒÉn n√™n c√≥ ƒë·ªô d√†i v·ª´a ph·∫£i, kho·∫£ng 200-300 t·ª´, v√† c√≥ c·∫•u tr√∫c r√µ r√†ng (m·ªü b√†i, th√¢n b√†i, k·∫øt lu·∫≠n).`;

        try {
            const essay = await callGeminiAPI(prompt);
            ui.essayOutput.value = essay;
            ui.essayOutputWrapper.classList.remove('hidden');
        } catch (error) {
            ui.essayOutput.value = `ƒê√£ x·∫£y ra l·ªói khi t·∫°o b√†i vƒÉn: ${error.message}`;
        } finally {
            setLoadingState(ui.generateEssayButton, false, 'T·∫°o B√†i VƒÉn');
        }
    }
    
    function setupTabs() {
        ui.tabs.forEach(button => {
            button.addEventListener('click', () => {
                const tabId = button.dataset.tab;
                if (tabId === state.currentTab) return;

                ui.tabs.forEach(btn => btn.classList.remove('active'));
                button.classList.add('active');

                ui.tabContents.forEach(content => content.classList.add('hidden'));
                document.getElementById(tabId).classList.remove('hidden');
                
                state.currentTab = tabId;
            });
        });
    }

    function handleImageSelection(file) {
        if (file && file.type.startsWith('image/')) {
            state.selectedImageFile = file;
            const reader = new FileReader();
            reader.onload = (e) => {
                ui.imagePreview.src = e.target.result;
                ui.imagePlaceholder.classList.add('hidden');
                ui.imagePreviewWrapper.classList.remove('hidden');
                ui.translateImageButton.disabled = false;
            };
            reader.readAsDataURL(file);
        }
    }

    async function handleTranslateImage() {
        if(state.isLoading || !state.selectedImageFile) return;
        setLoadingState(ui.translateImageButton, true, 'D·ªãch t·ª´ ·∫£nh');
        ui.outputText.value = '';
        ui.additionalOutputWrapper.classList.add('hidden');

        const reader = new FileReader();
        reader.onloadend = async () => {
            const base64Image = reader.result.split(',')[1];
            const mimeType = state.selectedImageFile.type;

            const prompt = `Tr√≠ch xu·∫•t t·∫•t c·∫£ vƒÉn b·∫£n t·ª´ h√¨nh ·∫£nh n√†y. Sau ƒë√≥, n·∫øu vƒÉn b·∫£n ƒë√£ tr√≠ch xu·∫•t l√† ti·∫øng √ä-ƒë√™, h√£y d·ªãch sang ti·∫øng Vi·ªát. N·∫øu vƒÉn b·∫£n ƒë√£ tr√≠ch xu·∫•t l√† ti·∫øng Vi·ªát, h√£y d·ªãch sang ti·∫øng √ä-ƒë√™. N·∫øu kh√¥ng ph·∫£i c·∫£ hai, ch·ªâ cung c·∫•p vƒÉn b·∫£n ƒë√£ tr√≠ch xu·∫•t. Ch·ªâ xu·∫•t ra vƒÉn b·∫£n ƒë√£ d·ªãch ho·∫∑c vƒÉn b·∫£n ƒë√£ tr√≠ch xu·∫•t n·∫øu kh√¥ng th·ªÉ d·ªãch. Kh√¥ng th√™m b·∫•t k·ª≥ l·ªùi gi·∫£i th√≠ch n√†o kh√°c.`;
            
            try {
                const translatedText = await callGeminiAPI(prompt, { data: base64Image, mimeType: mimeType });
                ui.outputText.value = translatedText;
            } catch (error) {
                ui.outputText.value = `ƒê√£ x·∫£y ra l·ªói khi d·ªãch t·ª´ ·∫£nh: ${error.message}`;
            } finally {
                setLoadingState(ui.translateImageButton, false, 'D·ªãch t·ª´ ·∫£nh');
            }
        };
        reader.readAsDataURL(state.selectedImageFile);
    }
    
    function handleAddTerm() {
        const ede = ui.newEdeText.value.trim();
        const viet = ui.newVietText.value.trim();
        if (ede && viet) {
            state.dictionary.push({ id: Date.now(), ede, viet });
            renderDictionary();
            ui.newEdeText.value = '';
            ui.newVietText.value = '';
        }
    }

    function handleDeleteTerm(e) {
        if (e.target.classList.contains('delete-term-btn')) {
            const id = parseInt(e.target.dataset.id);
            state.dictionary = state.dictionary.filter(term => term.id !== id);
            renderDictionary();
        }
    }

    async function handleLoadDictionaryFromFile() {
        const file = ui.loadDictionaryFileInput.files[0];
        if (!file) {
            alert("Vui l√≤ng ch·ªçn m·ªôt file JSON ƒë·ªÉ t·∫£i.");
            return;
        }

        setLoadingState(ui.loadDictionaryFromFileButton, true, 'T·∫£i t·ª´ File');

        const reader = new FileReader();
        reader.onload = (e) => {
            try {
                const loadedData = JSON.parse(e.target.result);
                if (Array.isArray(loadedData) && loadedData.every(item => item.ede && item.viet)) {
                    // Filter out duplicates and add new IDs
                    const newEntries = loadedData.filter(newItem => 
                        !state.dictionary.some(existingItem => 
                            existingItem.ede.toLowerCase() === newItem.ede.toLowerCase() && 
                            existingItem.viet.toLowerCase() === newItem.viet.toLowerCase()
                        )
                    ).map(item => ({ id: Date.now() + Math.random(), ...item })); // Add unique ID

                    state.dictionary = [...state.dictionary, ...newEntries];
                    renderDictionary();
                    alert(`ƒê√£ t·∫£i th√†nh c√¥ng ${newEntries.length} t·ª´ v√†o t·ª´ ƒëi·ªÉn!`);
                } else {
                    alert("ƒê·ªãnh d·∫°ng file JSON kh√¥ng h·ª£p l·ªá. Vui l√≤ng ƒë·∫£m b·∫£o file ch·ª©a m·∫£ng c√°c ƒë·ªëi t∆∞·ª£ng c√≥ thu·ªôc t√≠nh 'ede' v√† 'viet'.");
                }
            } catch (error) {
                alert(`L·ªói khi ƒë·ªçc file: ${error.message}. Vui l√≤ng ƒë·∫£m b·∫£o ƒë√¢y l√† file JSON h·ª£p l·ªá.`);
                console.error("Error parsing dictionary file:", error);
            } finally {
                setLoadingState(ui.loadDictionaryFromFileButton, false, 'T·∫£i t·ª´ File');
            }
        };
        reader.onerror = () => {
            alert("Kh√¥ng th·ªÉ ƒë·ªçc file.");
            setLoadingState(ui.loadDictionaryFromFileButton, false, 'T·∫£i t·ª´ File');
        };
        reader.readAsText(file);
    }

    // Placeholder for handleLoadDictionaryFromWeb (due to CORS in single HTML file)
    // async function handleLoadDictionaryFromWeb() {
    //     alert("T√≠nh nƒÉng t·∫£i t·ª´ ƒëi·ªÉn t·ª´ Web ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn v√† c√≥ th·ªÉ y√™u c·∫ßu m·ªôt backend server ƒë·ªÉ x·ª≠ l√Ω CORS.");
    // }


    ui.translateButton.addEventListener('click', handleTranslate);
    ui.generateExamplesButton.addEventListener('click', handleGenerateExamples);
    ui.summarizeExplainButton.addEventListener('click', handleSummarize);
    ui.generateEssayButton.addEventListener('click', handleGenerateEssay);
    ui.addTermButton.addEventListener('click', handleAddTerm);
    ui.customTranslationsList.addEventListener('click', handleDeleteTerm);
    ui.translateImageButton.addEventListener('click', handleTranslateImage);
    ui.loadDictionaryFromFileButton.addEventListener('click', handleLoadDictionaryFromFile); // New event listener
    // ui.loadDictionaryFromWebButton.addEventListener('click', handleLoadDictionaryFromWeb); // Placeholder

    ui.dropZone.addEventListener('click', () => ui.imageInput.click());
    ui.imageInput.addEventListener('change', (e) => handleImageSelection(e.target.files[0]));
    ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
        ui.dropZone.addEventListener(eventName, (e) => {
            e.preventDefault();
            e.stopPropagation();
        }, false);
    });
    ['dragenter', 'dragover'].forEach(eventName => {
        ui.dropZone.addEventListener(eventName, () => ui.dropZone.classList.add('bg-blue-100'), false);
    });
    ['dragleave', 'drop'].forEach(eventName => {
        ui.dropZone.addEventListener(eventName, () => ui.dropZone.classList.remove('bg-blue-100'), false);
    });
    ui.dropZone.addEventListener('drop', (e) => handleImageSelection(e.dataTransfer.files[0]));
    
    ui.removeImageButton.addEventListener('click', () => {
        state.selectedImageFile = null;
        ui.imageInput.value = '';
        ui.imagePlaceholder.classList.remove('hidden');
        ui.imagePreviewWrapper.classList.add('hidden');
        ui.translateImageButton.disabled = true;
    });
    
    // Web Speech API (Placeholders for now, not LLM-powered directly)
    ui.recordButton.addEventListener('click', () => {
        alert('T√≠nh nƒÉng ghi √¢m gi·ªçng n√≥i ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn!');
    });
    ui.speakTranslatedTextButton.addEventListener('click', () => {
        alert('T√≠nh nƒÉng ph√°t √¢m ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn!');
    });
    ui.speakAdditionalTextButton.addEventListener('click', () => {
        alert('T√≠nh nƒÉng ph√°t √¢m ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn!');
    });
    ui.speakEssayTextButton.addEventListener('click', () => {
        alert('T√≠nh nƒÉng ph√°t √¢m ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn!');
    });

    function initializeApp() {
        state.userId = `user_${Math.random().toString(36).substr(2, 9)}`;
        ui.userIdDisplay.textContent = `ID Ng∆∞·ªùi d√πng: ${state.userId}`;
        ui.translateImageButton.disabled = true;
        setupTabs();
        renderDictionary();
    }
    
    initializeApp();
});
</script>
</body>
</html>
